<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coyled.com</title>
    <link>http://coyled.com/</link>
    <atom:link href="http://coyled.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>stuff from coyled</description>
    <pubDate>Wed, 05 Apr 2017 05:34:33 -0700</pubDate>
    <lastBuildDate>Wed, 05 Apr 2017 05:34:33 -0700</lastBuildDate>

    
    <item>
      <title>IoT 근거리 통신 Z-wave 해킹-1</title>
      <link>/2017/04/05/z_wave_exploit-1.html</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 -0700</pubDate>
      <author>문경곤</author>
      <guid>/2017/04/05/z_wave_exploit-1</guid>
      <description>&lt;p&gt;안녕하세요.&lt;br /&gt;
이번 글 에서 다룰 내용은 최근 가하급수적으로 증폭하고 있는 IoT 디바이스가 통신할 때 사용하는 통신 프로토콜에 대해서 살펴 보겠습니다.&lt;br /&gt;
&lt;br /&gt;
IoT 해킹 주제를 다루게 된 계기로는, i2sec 최근 국내 S모기업 IoT 모의해킹 프로젝트를 수행하게 되었고, 요즘 4차산업혁명의 주역이자 매우 Hot한 아이템이기 때문입니다.&lt;br /&gt;
그럼 한번 빠져 봅시다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;IoT 시스템 구성은 일반적으로 아래와 같습니다.
&lt;img src=&quot;/images/2017-04-05/iotarch.jpg&quot; alt=&quot;IoTsystem&quot; /&gt;
&lt;br /&gt;
IoT 서비스를 제공해 주는 서비스 서버, 관리서버와 가스락, 도어락, 플러그, 스위치 등의 IoT 단말들&lt;br /&gt;
그리고, 서버와 단말의 네트워크 통신에 도움을 주는 IoT 허브와 AP로 구성되어 있습니다.&lt;br /&gt;
&lt;br /&gt;
저희는 오늘 IoT 허브와 IoT 단말간 근거리 통신에 자주 사용되는 Z-Wave 취약점에 대해 살펴 보겠습니다.&lt;br /&gt;
&lt;img src=&quot;/images/2017-04-05/iot2.png&quot; alt=&quot;IoTThings&quot; /&gt;
&lt;br /&gt;
Z-Wave 취약점 발생구간은 위 그림과 같이단말기에 직접 통신하는 구간에서 발생하며, 취약점으로는 스니핑, 인증 키 우회, 패킷 Replay Attack 등이 있습니다.&lt;br /&gt;
&lt;br /&gt;
Z-Wave 자주 쓰이냐구요? 겁나 많은 IoT 디바이스들이 근거리 통신에 사용 중 입니다.
&lt;br /&gt;
그럼 Z-Wave에 대해서 조금 살펴보죠.
&lt;br /&gt;
&lt;strong&gt;Z-Wave&lt;/strong&gt;는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8D%B4%EB%A7%88%ED%81%AC&quot;&gt;덴마크&lt;/a&gt;회사인 &lt;a href=&quot;http://z-wave.sigmadesigns.com/&quot;&gt;Zensys&lt;/a&gt;와 &lt;a href=&quot;http://www.z-wavealliance.com/&quot;&gt;Z-Wave 얼라이언스&lt;/a&gt;에서 개발한 상호운용성을 가지는 무선 &lt;a href=&quot;https://ko.wikipedia.org/wiki/통신_프로토콜&quot;&gt;통신 프로토콜&lt;/a&gt;로 가정 자동화와 센서 네트워크와 같은 저전력과 저 대역폭을 요구하는 장치를 위해 설계되었습니다.&lt;br /&gt;
&lt;a href=&quot;http://www.z-wavealliance.com/&quot;&gt;Z-Wave 얼라이언스&lt;/a&gt;는 Z-Wave 표준에 기반한 무선 홈컨트롤 제품들을 구축하는 것에 동의하는 &lt;a href=&quot;http://z-wavealliance.org/z-wave_alliance_member_companies/&quot;&gt;160개 이상의제조사&lt;/a&gt;들로 이루어진 컨소시엄으로 2017년 현재 1700여개의 상호운용가능한 Z-Wave 제품들과 약 7000만개가 넘는 Z-Wave 장비들이 출시되어 있습니다.&lt;a href=&quot;http://products.z-wavealliance.org/&quot;&gt;참고&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/2017-04-05/zwave1.png&quot; alt=&quot;z-wave-1&quot; /&gt;
&lt;br /&gt;
Z-wave는 9,600bits/s, 40kbits/s 데이터 전송속도를 지원하며, 사용하는 주파수 대역은 860~920Mhz를 사용합니다.&lt;br /&gt;
국가별로 통신 주파수 대역의 차이가 있는데, 한국의 경우 920.9MHz, 921.MHz, 923.1MHz를 사용합니다.&lt;br /&gt;&lt;br /&gt;
주파수 전이방식은 GFSK를 이용하며, 최대 232노드를 수용하며 30~100m 거리의 근거리 통신을 가능하게 해줍니다.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
Z-wave의 Structure&lt;br /&gt;
Controller, Node로 구성되어 있으며 제어를 하기 위해선 ID(고유 식별 정보), Home ID, Network ID, Node ID가 필요합니다.
&lt;img src=&quot;/images/2017-04-05/zwave3.png&quot; alt=&quot;z-wave-2&quot; /&gt;&lt;br /&gt;
Z-wave Stack&lt;br /&gt;
&lt;img src=&quot;/images/2017-04-05/zwave_stack.png&quot; alt=&quot;z-wave-stack&quot; /&gt;&lt;br /&gt;
Z-wave은 총 4가지 Layer로 구성되어 있으며 디지털-&amp;gt;아날로그 전환 해주는 Phy Layer, 충돌 회피, 저전력 운영과 관련된 MAC Layer, 전송의 신뢰성, 라우팅을 관리하는 Transport, Routing Layer,
전송방식, 명령제어를 해주는 Application Layer로 구성되어 있습니다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Z-wave Pairing &amp;amp; Command&lt;br /&gt;
Pairing: Controller와 Slave 연결을 맺는 과정입니다. 아래 그림을 보시면 이해가 빠르실 거 같네요.&lt;br /&gt;
&lt;img src=&quot;/images/2017-04-05/z-wave pairing.png&quot; alt=&quot;z-wave_pairing&quot; /&gt;&lt;br /&gt;
Command: Controller가 Slave에게 명령어를 전달하는 과정입니다.&lt;br /&gt;
&lt;img src=&quot;/images/2017-04-05/zwave_command.png&quot; alt=&quot;zwave_command&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
1편에서는 이렇게 Z-wave의 기본 원리에 대해서 살펴보았습니다.&lt;br /&gt;
2편에서는 대망의 기본원리의 취약점을 이용한 공격 방안에 대해 리뷰하겠습니다.&lt;br /&gt;.
SNS에 노출된 눈의 피로를 제 컨텐츠에 투자 해 주신 것을 감사드립니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>보안업데이트의 중요성</title>
      <link>/2017/04/01/security_update.html</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 -0700</pubDate>
      <author>김동현</author>
      <guid>/2017/04/01/security_update</guid>
      <description>&lt;p&gt;안녕하세요. 김동현입니다.&lt;br /&gt;
이번 글은 기술적인 내용보다는, 보안업데이트에 대한 생각을 공유하려합니다.&lt;br /&gt;
사실 프로젝트 투입전 휴가기간에 술병에 시달려, 조금 뇌를 맑게 해야겠다는 생각으로 주절주절 서술하려 합니다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;시작하며&lt;/h3&gt;

&lt;p&gt;정보보안업계 또는 IT업계에서 일하다보면, 보안의 중요성에 대해 조금더 크게 느끼게 됩니다.&lt;br /&gt;
정보보안 사고가 발생하면 금전적 피해, 고객 신뢰도 하락과 같은 피해 등 여러 골치아픈 일이 생기기 때문이죠.&lt;br /&gt;
그래서 대부분의 기업들은 백신, 방화벽, 정보보안컨설팅, 각종 보안 솔루션 도입 등을 통해 보안사고를 방지하려 합니다.&lt;br /&gt;
기업내부예산도 최근에는 크게 증가하는 추세죠. 그런데도 정보보안사고는 끊임없이 발생하고 있습니다. 그 이유는 무엇일까요?&lt;br /&gt;
여러가지 이유가 있겠지만, 보안 업데이트에 대해 오늘은 이야기하려 합니다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;보안업데이트가 뭔데?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-04-01/windows_10_update_screen.png&quot; alt=&quot;update&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보안업데이트는 위 스크린샷처럼 볼 수 있는 업데이트 내의 업데이트 내용 중 일부라고 보면 됩니다.&lt;br /&gt;
응용프로그램이나 OS 등의 취약점을 보완하는걸 보안 업데이트라고 말합니다.&lt;br /&gt;
실생활에 조금 비유를 해 보자면, 보안 업데이트는 문단속을 잘 하는거라고 생각해도 될 것 같습니다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;보안업데이트는 왜 중요해?&lt;/h3&gt;

&lt;p&gt;사례를 예로 들려고 합니다.&lt;br /&gt;
2015년 클리앙 웹 사이트에서 대량으로 랜섬웨어가 유포가 되었는데요.&lt;br /&gt;
이때 Internet Explorer의 취약점과 Adboe Flash 취약점이 함께 사용되어, 보안패치가 되어있지 않은 사이트 이용자들은 랜섬웨어에 감염되었습니다.&lt;br /&gt;
실제로 랜섬웨어가 대량으로 유포되었던 첫 사례라 매우 큰 이슈가 되었었죠.&lt;br /&gt;
&lt;a href=&quot;http://www.boannews.com/media/view.asp?idx=46010&quot;&gt;클리앙 랜섬웨어 악성코드 유포사건의 전말&lt;/a&gt;&lt;br /&gt;
아무튼 이러하듯, 보안사고의 원인이 패치적용 미흡으로 인해 발생하는 사례가 많습니다.&lt;br /&gt;
특히, 악성코드 유포 방식 중 하나인 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B8%8C_%EB%B0%94%EC%9D%B4_%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C&quot;&gt;Drive By Download&lt;/a&gt;에 악용이 되는 경우가 많죠.&lt;br /&gt;
또한 공격자 입장에서도 알려지지 않은 취약점(0-day)를 발견하기는 쉽지 않기에 이미 알려진 취약점(1-day)를 활용해 공격하는 사례가 많아 보안 업데이트는 항시적으로 한다는 생각이이 필요합니다.&lt;br /&gt;
고로, 내 PC 또는 내 인프라를 잘 보호하고 싶다면.. 보안 업데이트는 필수라고 말할 수 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;기업에는 어떻게 적용해야 할까?&lt;/h3&gt;

&lt;p&gt;사실상 기업에서는 보안 업데이트 프로세스가 대부분 있습니다.&lt;br /&gt;
주기적으로 컨설팅도 받아 자산에 대한 버젼을 점검받고, 그에 따른 업데이트를 권고받고 있죠.&lt;br /&gt;
하지만, 금융권이나 국가기관처럼 폐쇄망이나 외부와 통신이 되지 않는 내부망의 경우 업데이트는 매우 힘들다고 볼 수 있습니다.&lt;br /&gt;
외부 업데이트서버에 접속을 하기가 힘든 환경이기 때문이죠. 그래서 내부망이나 폐쇄망의 경우 PMS(Patch Management System)을 도입해 해결하고 있습니다.&lt;br /&gt;
솔루션도 중요하지만, 보안 담당자의 마인드가 먼저 따라가야되는 부분인 것 같습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;짧게 휴가기간 중 보안 업데이트에 대한 내용을 적어보았습니다.&lt;br /&gt;
다음 글에는 기술적인 내용으로 돌아오도록 하겠습니다. :) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>검증되지 않은 리다이렉트 및 포워드</title>
      <link>/2017/03/30/owasp_top_10_forward.html</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 -0700</pubDate>
      <author>박용운</author>
      <guid>/2017/03/30/owasp_top_10_forward</guid>
      <description>&lt;h3 id=&quot;section&quot;&gt;시작하며.&lt;/h3&gt;

&lt;p&gt;현업 컨설턴트 중 “A10 검증되지 않은 리다이렉트 및 포워드” 취약점 항목을 모르는 사람은 없을것이라 생각한다. 리다이렉트에 관한 자료는 많지만 포워드에 대한 예시가 없어 해당 문서를 작성한다. 즉, 해당 문서의 핵심은 리다이렉트가 아닌 포워드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-30/1.png&quot; alt=&quot;owasp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 “OWASP Top 10 한글 설명서” 요약 페이지의 마지막에 나와있듯이 취약점 분포가 드물고, 탐지 가능성 쉬움으로 평가가 되어 있는 취약점이다.&lt;/p&gt;

&lt;p&gt;현업 컨설턴트인 저자의 입장에서 기술적 측면으로 관심이 높지 않았다. 기술적으로 탐지하기 편하기 때문이다. 파라메타에 application명 이나 도메인 주소가 포함되어 있는지 육안으로 구분이 되기 때문에 선 분석, 후 공격이 가능하기 때문이다.&lt;/p&gt;

&lt;p&gt;“검증되지 않은 리다이렉트 및 포워드” 취약점 항목을 굳이 세분화 하자면 2가지라 생각한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;검증되지 않은 리다이렉트&lt;/li&gt;
  &lt;li&gt;검증되지 않은 포워드&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;첫째, 검증되지 않은 리다이렉트 취약점은 이미 수 많은 예시 코드들이 나와있고 취약점이 직관적이라 충분히 이해를 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;url---&quot;&gt;안전한 URL 리다이렉트 예시 코드&lt;/h3&gt;

&lt;p&gt;Java
&lt;code class=&quot;highlighter-rouge&quot;&gt;
response.sendRedirect(&quot;http://www.mysite.com&quot;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;PHP
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php
 /* Redirect browser */
 header(&quot;Location: http://www.mysite.com/&quot;);
 ?&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ASP.NET
&lt;code class=&quot;highlighter-rouge&quot;&gt;
Response.Redirect(&quot;~/folder/Login.aspx&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rails
&lt;code class=&quot;highlighter-rouge&quot;&gt;
redirect_to login_path
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;url----1&quot;&gt;취약한 URL 리다이렉트 예시 코드&lt;/h3&gt;

&lt;p&gt;Java
&lt;code class=&quot;highlighter-rouge&quot;&gt;
response.sendRedirect(request.getParameter(&quot;url&quot;));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;PHP
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$redirect_url = $_GET[&#39;url&#39;];
 header(&quot;Location: &quot; . $redirect_url);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C#
&lt;code class=&quot;highlighter-rouge&quot;&gt;
string url = request.QueryString[&quot;url&quot;];
 Response.Redirect(url);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rails
&lt;code class=&quot;highlighter-rouge&quot;&gt;
redirect_to params[:url]
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploit-&quot;&gt;Exploit 예시&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://example.com/example.php?url=http://malicious.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;매우 심플하다. 사용자가 넘겨준 매개변수로 각 언어별로 리다이렉트 처리시 취약점이 발생하여 악의적 URL로 렌더링 될 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;둘째, 검증되지 않은 포워드 취약점의 예시 코드를 먼저 살펴 보겠다. 유일한 형태의 예시라 보면된다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;검증되지 않은 포워드 예시 코드&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ForwardServlet extends HttpServlet
{
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String query = request.getQueryString();
    if (query.contains(&quot;fwd&quot;))
    {
      String fwd = request.getParameter(&quot;fwd&quot;);
      try
      {
        request.getRequestDispatcher(fwd).forward(request, response);
      }
      catch (ServletException e)
      {
        e.printStackTrace();
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;여기서부터 궁금증이 생겼다.&lt;/p&gt;

&lt;p&gt;리다이렉트와 같이 사용자에게 전달받은 값으로 포워딩을 해서 발생한다는 취약점의 예시로는 맞다고 본다.&lt;/p&gt;

&lt;p&gt;하지만 리다이렉트와 포워딩의 차이만으로 이러한 취약점이 어떻게 발생하는지 시원하게 풀리지 않았다.&lt;/p&gt;

&lt;p&gt;가장 근본적인 나의 궁금증은 이러했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.example.com/admin.jsp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위와 같은 요청시 관리자 메뉴 페이지가 접근이 되고 제어가 가능하다면 이 취약점은 “URL 강제요청”, “URL Jumping”, “A7 접근통제 누락” 과 같은 취약점이 되겠지만, 지금과 같은 상황에서는 당연히 “접근 권한이 없습니다.”를 출력한다는 것이고, 아래와 같은 포워딩 어플리케이션을 이용할 경우 접근제어 우회가 된다라고 익히 알려져있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://www.example.com/function.jsp?fwd=admin.jsp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그렇다면 “접근제어가 우회된다.” 라는 의미는 접근제어를 하지 않는다라는 표현이 아닌 접근제어가 있지만 통과 된다라는 말이다.&lt;/p&gt;

&lt;p&gt;자 그렇다면 웹의 포워딩이라는 기술이 어떻게 동작이 되었기에 접근제어가 우회가 가능한지 생각해보았다. 이 궁금증을 풀기 위해서는 리다이렉트와 포워딩을 비교가 필요했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-30/2.png&quot; alt=&quot;redirect&amp;amp;forward&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;forward&quot;&gt;Forward&lt;/h3&gt;

&lt;p&gt;Web Container 차원에서 페이지 이동만 있다. 실제로 웹 브라우저는 다른 페이지로 이동했음을 알 수 없다. 그렇기 때문에, 웹 브라우저에는 최초에 호출한 URL이 표시되고 이동한 페이지의 URL 정보는 볼수 없다. 동일한 웹 컨테이너에 있는 페이지로만 이동할수 있다. 현재 실행중인 페이지와 Forward에 의해 호출될 페이지는 request와 response 객체를 공유한다.&lt;/p&gt;

&lt;h3 id=&quot;redirect&quot;&gt;Redirect&lt;/h3&gt;

&lt;p&gt;Web Container 는 Redirect 명령이 들어오면 웹 브라우저에게 다른 페이지로 이동하라고 명령을 내린다.
그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고 그 주소로 이동한다. 다른 웹 컨테이너에 있는 주소로 이동이 가능하다.
새로운 페이지에서는 request 와 response 객체가 새롭게 생성된다.&lt;/p&gt;

&lt;p&gt;역시는 역시인가 OTL. 아주 새로운 측면의 원하는(?) 내용은 없었다. 풀리지 않았다. 오랜시간 구글여행을 통해 가장 근접한 유일한 답변을 찾았다.&lt;/p&gt;

&lt;p&gt;http://forum.spring.io/forum/spring-projects/security/1672-jsp-forward-bypasses-acegi&lt;/p&gt;

&lt;p&gt;해당 블로그의 핵심은 내용은 바로 이것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Security constraints only work on the original request URI, not on calls made via a RequestDispatcher (which include &amp;lt;jsp:include&amp;gt; and &amp;lt;jsp:forward&amp;gt;).

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
보안 제약 조건은 RequestDispatcher (&amp;lt;jsp : include&amp;gt; 및 &amp;lt;jsp : forward&amp;gt; 포함)를 통한 호출이 아니라 원래 요청 URI에서만 작동합니다.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;검증되지 않은 포워드의 발생원인은 바로 Include 또는 forward시 보안 제약 조건이 동작하지 않으므로 발생하는 것이다.&lt;/p&gt;

&lt;p&gt;여기서 말하는 보안 제약 조건이라 함은 1990년대 초창기 acegi 라고 불리는 보안 서비스 프로젝트가 이름이 변경되어 지금의 Spring Security를 부른다.&lt;/p&gt;

&lt;p&gt;스프링 시큐리티(Spring Security)는 스프링 서브 프로젝트 중 하나로 스프링 기반의 어플리케이션을 보호하기 위한 필수적인 프레임워크이다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;끝내며&lt;/h3&gt;
&lt;p&gt;즉 Spring Security의 보안필터가 보안 제약 조건이 성립이 되지 않아 동작되지 않으므로 접근제어가 우회가 되는 것이 이 취약점의 핵심이다.&lt;/p&gt;

&lt;p&gt;마지막으로 현재 저자의 결론은 자바 플랫폼에서만 국한적으로 발생하는 취약점이라 생각한다. 억지로 구현해낸 취약점이 아니고서는 말이다.&lt;/p&gt;

&lt;p&gt;현업 컨설턴트 분들에게 도움이 되었으면 한다.&lt;/p&gt;

&lt;p&gt;1탄은 여기서 마무리하겠다. 2탄은 더욱 어그로를 끌 수 있는 무언가를 준비하겠다.&lt;/p&gt;

&lt;p&gt;떡밥을 남겨두고 떠난다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2탄 리스트&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;1탄을 이어서 취약점 구현해보기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Javascript Drive by Download with ransomware 최신 동향 및 실시간 샘플 수집&amp;amp;분석&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;APT 신호탄 : 피싱 메일 악성코드 제작(백신 탐지 zero)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;댓글에 관심도를 반영하겠다.&lt;/p&gt;

&lt;p&gt;끝까지 읽어줘서 고맙다. :D&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;출처&lt;/h2&gt;

&lt;p&gt;https://www.owasp.org/images/2/2c/OWASP_Top_10_-&lt;em&gt;2013_Final&lt;/em&gt;-_Korean.pdf&lt;/p&gt;

&lt;p&gt;http://cocomo.tistory.com/95&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>쉽게 시작하는 퍼징 - 1</title>
      <link>/2017/03/27/easy_fuzzing-1.html</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 -0700</pubDate>
      <author>이창영</author>
      <guid>/2017/03/27/easy_fuzzing-1</guid>
      <description>&lt;h3 id=&quot;section&quot;&gt;퍼징이 뭐지?&lt;/h3&gt;
&lt;p&gt;퍼징(fuzzing)은 ‘소프트웨어 취약점’ 찾을 때 쓰는 방법 중 하나에요. 퍼즈 테스팅(Fuzz testing)이라고도 하는데, 퍼징이라고 더 많이 표현하는 것 같아요. 소프트웨어 취약점이라는 건 컴퓨터 쓸 때 사용하는 [인터넷 브라우저, mp3 플레이어, (문서 작성도구인)한컴오피스 한글] 같은 프로그램에 정상이 아닌 데이터를 넣어서, 프로그램이 꼬여서 터지는 걸 말해요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/crash.png&quot; alt=&quot;crash&quot; /&gt;
이런 화면 본 적 있는 분도 계시고 못 보신 분도 계실텐데, 이게 프로그램 터졌을 때 나오는 화면이에요. 이런 화면이 떴을 때, [크래시 났다, 터졌다, 크래시가 발생했다] 이렇게 얘기해요. 퍼징은 이런 크래시를 찾기 위해서 몇 가지 프로그램들을 이용해, 입력할 파일(또는 값)을 &lt;strong&gt;만들고(생성)&lt;/strong&gt;, 프로그램(인터넷브라우저 같은)을 &lt;strong&gt;켜고(실행)&lt;/strong&gt;, 프로그램이 파일을 &lt;strong&gt;열고(입력)&lt;/strong&gt; 크래시가 발생하는지 &lt;strong&gt;관찰&lt;/strong&gt; 후 크래시가 발생하는지 아닌지에 따라 이때 사용한 파일과 로그를 &lt;strong&gt;저장하거나 폐기(분류)&lt;/strong&gt; 같은 절차를 자동화(또는 반자동화)한 테스트 방법이에요.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;프로그램을 터트려서 뭐하냐?&lt;/h3&gt;
&lt;p&gt;그래서 터트리면 뭐가 좋다고 비싼 컴퓨터로 퍼징을 돌리냐 이렇게 생각하실텐데, 그럴만한 이유가 있죠. 프로그램이 터질 때 안에서 코드가 꼬여서 터지는건데, 꼬이는 코드를 잘 이용하면, 내 마음대로 프로그램을 동작시킬 수 있거든요. (아! 근데 모든 크래시가 이렇게 내 맘대로 프로그램을 동작시킬 수 있는 건 아니고, 특정한 경우가 있는데, 이 내용은 조금 나중에 다룰께요. 어쨌든) 프로그램을 맘대로 동작시키면 뭐하냐? 이게 이제 궁금할텐데, 여기부터는 보안이랑 관련이 돼요. 마이크로소프트 엑셀을 예로 들어볼께요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/apt.png&quot; alt=&quot;apt&quot; /&gt;
드라마 유령에 나오는 한 장면인데요, “신월동” 씨가 메신저로 어떤 엑셀파일을 보냈어요. 그래서 이 파일을 여는데요. 어떤 일이 일어날까요? 아래 그림을 보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/apt-success.png&quot; alt=&quot;apt-success&quot; /&gt;
컴퓨터에 달린 웹캠이 동작하면서, 촬영을 하는건데요. 사진만 보면 어쨌다는 건지 모르겠지만 드라마를 보면, 이 화면이 해커의 컴퓨터 화면에 그대로 나오게 되거든요. 이게 어떻게 된걸까요?
간단하게 설명하면, 엑셀 프로그램 크래시를 이용해서 웹캠 촬영 화면을 해커한테 보낸거에요. 앞에서 크래시를 잘 이용하면 프로그램을 내 맘대로 동작시킬 수 있다고 했잖아요. 이 상황에선 “웹 캠을 동작시켜서 내 컴퓨터로 화면을 전송해라”가 “내 맘대로”에 해당하는 상황인 거에요.&lt;/p&gt;

&lt;p&gt;웹캠을 전송하는 것 말고 다른 일들도 할 수 있겠죠? 다양한 일들을 하고 싶을 수 있는데, 그걸 이 엑셀파일에 구현하려면 복잡하겠죠? 그래서 일반적으로 원격 조종 툴을 설치하는 동작을 하도록 만들어요. 원격조종툴이 설치되고 나면, 해커가 그 컴퓨터에 접속해서 원하는 거의 모든 작업들을 할 수 있기 때문이에요. 개인한테 이런 파일을 보낸 게 아니라, 경쟁사의 간부한테 보내서 원격조종툴을 설치했다고 상상해보세요. 이 공격이 성공하면 경쟁사의 기밀문서들을 훔칠 수 있을꺼에요. 요즘처럼 정보가 돈이되는 세상에서 경쟁사의 기밀은 엄청난 금전적 가치가 있을꺼에요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/zuck.jpg&quot; alt=&quot;주커버그_웹캠_테이프&quot; /&gt;
페이스북 창업자 마크 주커버그 아시죠? 한번 화제가 됐던 사진인데, 혹시 왜 화제가 됐는지 아시나요? 주커버그 뒤에 책상에 랩탑이 놓여있는데, 자세히 보면 웹캠이랑 마이크에 테이프가 붙여져 있어요. 보이시나요? 주커버그도 이런 정보 유출 위험 때문에 테이프를 붙여놓은 것 같아요.&lt;/p&gt;

&lt;p&gt;결론적으로, “프로그램 터트리면 뭐하냐?”에 대한 질문에 “돈으로 만든다”라고 답할 수 있어요. 꼭 경쟁 회사가 없어도 크래시로 돈을 벌 수 있는 이유는, 크래시 자체가 거래되는 시장이 있기 때문이에요. 양지랑 음지에서 거래되는데, 음지에서 일어나는 거래는 범죄를 목적으로 한다고 설명할 수 있고, 양지에서 일어나는 거래는 ‘버그바운티’ 로 설명할 수 있는데,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/bugbounty.png&quot; alt=&quot;bugbounty&quot; /&gt;
버그바운티가 뭐냐하면, (페이스북, 마이크로소프트 이런 회사들도 다 하는 건데) 자사 프로그램에서 취약점을 찾아 제보 했을 때 포상금을 지급하는 제도에요. 페이스북은 2011년부터 버그바운티를 운영했는데 보안 취약점을 제보하면, 검토 후에 최소 500달러부터 시작하는 액수의 포상급을 준다고 해요. 구글은 100달러에서 2만달러까지, 마이크로 소프트는 최소 5000달러라고 하네요. 국내 기업들 중에도 이미 버그바운티를 운영하는 곳이 있어요, 그리고 앞으로 점점 운영하는 기업이 많아질 것으로 예상 돼요.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;나도 크래시를 찾을 수 있을까?&lt;/h3&gt;
&lt;p&gt;퍼징할 때 쓰는 툴을 퍼져(fuzzer) 라고 하는데, 간단하게 구성하면 파이썬 10줄이면 돌릴 수 있어요. 코드를 보기 전에 퍼져에 있어야 할 필수 기능 몇가지를 알아볼까요? 퍼져는 크게 3가지 기능이 필요한데, 그 기능은 먼저 입력값을 생성하는 기능, 프로그램을 실행하는 기능, 결과를 분류하는 거에요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-03-27/fuzzing.png&quot; alt=&quot;fuzzing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 코드는 2012 codeengn 발표 자료 &lt;a href=&quot;https://www.slideshare.net/CodeEngn/2012-codeengn-conference-06-beist-everyone-has-his-or-her-own-fuzzer&quot;&gt;Everyone has his or her own fuzzer&lt;/a&gt;에 있는 코드인데 파일을 생성하고 실행하는 작업이 파이썬 언어로 10줄밖에 안될 정도로 간단하게 표현되어 있어요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os, sys, random

def go():
    return random.randrange(0, 0x100)

filesize = os.path.getsize(&quot;./sample.xxx&quot;)
fp = open(&quot;./sample.xxx&quot;, &quot;rb++&quot;)
tmpoffset = random.randrange(0, filesize)
fp.seek(tmpoffset, 0)
fp.write(&quot;%c%c%c%c&quot; % (go(), go(), go(), go()))  # 값 조작(입력값 생성)
fp.close()
os.system(&quot;target_binary sample.xxx&quot;)            # 실행
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;프로그램이 터지는지 확인해서 처리하는 부분을 넣고 반복문을 추가해서 작업을 반복시키면 정말 간단하게 퍼져가 완성되네요. 더 좋은 작업 효율을 위해서는 여러 기능들이 추가 되어야 하겠지만요.&lt;/p&gt;

&lt;p&gt;간단하게 퍼징을 알아봤는데요. 다음 연재에는 윈도우 운영체제에 설치해서 간단하게 사용할 수 있는 minifuzz 라는 도구를 사용해서 fuzzing 을 해볼께요.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>위키리크스의 CIA 도감청 이슈 공개(Valut7 Project)</title>
      <link>/2017/03/08/wikileaks-cia-hacking-vault7.html</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 -0800</pubDate>
      <author>김동현</author>
      <guid>/2017/03/08/wikileaks-cia-hacking-vault7</guid>
      <description>&lt;p&gt;안녕하세요. i2sec의 김동현입니다.&lt;br /&gt;
위키리크스에서 CIA의 도감청이슈에 대해 공개해, 정리해봤습니다.&lt;br /&gt;
이번 글은 정리되는 포스트로 기술적 내용과는 조금 거리가 있습니다.&lt;br /&gt;
위키리크스는 엄청 오랜만에 듣는 이름이네요 :)&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;개요&lt;/h3&gt;
&lt;p&gt;Wikileaks는 Year Zero의 일환으로 Vault 7이란 첫 아카이브를 공개.&lt;br /&gt;
* 전체크기는 513MB로  8,716건의 문서가 포함&lt;br /&gt;
* iOS, Android, MS용으로 개발된 0-Day 포함&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cias-0-day--encryption-bypass&quot;&gt;CIA’s 0-Day &amp;amp; Encryption bypass&lt;/h3&gt;
&lt;p&gt;WhatsApp, Signal, Telegram, Weibo, Confide, Clockman의 암호화를 우회해 음성메세지 및 텍스트 메세지를 확인할 수 있다.&lt;br /&gt;
* 암호화 우회 및 Decryption이 가능한 것으로 추정 됨.&lt;br /&gt;
CIA는 NSA, GCHQ(영국의 정보기관) 또는 민간 익스플로잇 거래 업체, 파트너기관 등과 거래한 내역이 확인 되었다.&lt;br /&gt;
스마트폰 해킹을 위한 0-Day와 악성코드를 개발한 정황이 확인되었다.&lt;br /&gt;
16년까지 CIA해킹부서에 등록된 사용자는 5000명이 넘었고, 0-Day, 악성코드 및 Exploit Weapon 등이 확인 되었다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;weeping-angel-attack&quot;&gt;Weeping Angel Attack&lt;/h3&gt;
&lt;p&gt;스마트 TV를 해킹 해 감청하는 프로젝트로, 스마트TV를 통해 대화를 녹음하고 CIA서버로 보내는 프로젝트&lt;br /&gt;
* 이미 2013년도부터, 스마트 TV해킹은 이슈화 되어 있었다.&lt;br /&gt;
* 이슈가 되었던 그 당시와 아키텍쳐를 많이 수정했다고 하지만…&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cia--spy-applicaiton-&quot;&gt;CIA에서 도감청한 Spy Applicaiton 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;VLC Player Portable&lt;/li&gt;
  &lt;li&gt;Irfan View&lt;/li&gt;
  &lt;li&gt;Chrome Portable&lt;/li&gt;
  &lt;li&gt;Opera Portable&lt;/li&gt;
  &lt;li&gt;Firefox Portable&lt;/li&gt;
  &lt;li&gt;ClamWin Portable&lt;/li&gt;
  &lt;li&gt;Kaspersky TDSS Killer Portable&lt;/li&gt;
  &lt;li&gt;McAfee Stinger Portable&lt;/li&gt;
  &lt;li&gt;Sophos Virus Removal&lt;/li&gt;
  &lt;li&gt;Thunderbird Portable&lt;/li&gt;
  &lt;li&gt;Opera Mail&lt;/li&gt;
  &lt;li&gt;Foxit Reader&lt;/li&gt;
  &lt;li&gt;Libre Office Portable&lt;/li&gt;
  &lt;li&gt;Prezi&lt;/li&gt;
  &lt;li&gt;Babel Pad&lt;/li&gt;
  &lt;li&gt;Notepad++&lt;/li&gt;
  &lt;li&gt;Skype&lt;/li&gt;
  &lt;li&gt;Iperius Backup&lt;/li&gt;
  &lt;li&gt;Sandisk Secure Access&lt;/li&gt;
  &lt;li&gt;U3 Software&lt;/li&gt;
  &lt;li&gt;2048&lt;/li&gt;
  &lt;li&gt;LBreakout2&lt;/li&gt;
  &lt;li&gt;7-Zip Portable&lt;/li&gt;
  &lt;li&gt;Portable Linux CMD Prompt&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;valut7-&quot;&gt;Valut7 특이사항&lt;/h3&gt;
&lt;p&gt;음성인식 기술을 도입한걸로 보임. &lt;br /&gt;
Skype 음성 대화는 실시간으로 텍스트로 변환되고, 관심있는 내용을 스캔해 CIA 서버로 전송함&lt;br /&gt;
* Breaking: Skype voice conversations are converted into text in real-time, scanned for contents of interest and stored in CIA spy cloud.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;제 2의 프리즘 프로젝트?&lt;/h3&gt;
&lt;p&gt;프리즘 프로젝트의 연장선으로 보임, 사실 위키리크스 측에서 ‘첫번째 공개’라고 했으니, 추가적인 공개가 얼만큼 될지 매우 ‘기대’되는 상황&lt;br /&gt;
사실상 프리즘 프로젝트는 이러한 사실이 하나씩 나오며 종료됬다고 보기는 힘들어 보임.&lt;br /&gt;
최근 개봉된 영화 또는 발간된 책 등 / 해외 기사 등을 종합해보면 무차별한 도 감청 또는 선별된 도 감청은 확실히 이루어지고 있다고 봐도 무방할 듯 싶음.
&lt;br /&gt;
### HammerDrill v2.0: A Malware to Steal Data From Air Gapped PCs
MS, Linux, Solaris, MacOS를 타겟으로 한 악성코드(크로스플랫폼환경으로 개발된)&lt;br /&gt;
망분리 환경을 타겟으로 했으며, 개발 중 테스트코드 완성도도 상당히 높아 보임&lt;br /&gt;
* 특정 차량 해킹내용도 들어가 있으며, 탐지할 수 없는 살인(사고 위장)이 가능하다고 제안&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cia-ios----&quot;&gt;CIA는 iOS 해킹 전담반 운영 중?&lt;/h3&gt;
&lt;p&gt;iOS의 점유율은 14.5%정도입니다. 위키리크스는 CIA가 iOS해킹 전담반을 운영 중이라고 했는데요.&lt;br /&gt;
그 이유는, “사회,정치,외교,비지니스, 엘리트 사회에서는 아이폰이 인기가 많다”는 이유였습니다.&lt;br /&gt;
물론 안드로이드 폰 역시도 소프트웨어 공격형식의 침투가 가능하다고 말하고 있습니다.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;마무리하며&lt;/h3&gt;
&lt;p&gt;Goverment에서 하는 정보기관/해킹/보안활동 등이 미치는 영향은 민간에 상당한듯 싶습니다.&lt;br /&gt;
이러한 민간사찰 이슈는 일반인들에게 매우 가깝게 느껴질 수 밖에 없으며, 보안업계에서 일하는 저희 역시도 한번쯤은 더 생각해보게 되네요.&lt;br /&gt;
기술을 좋아하는 입장으로, 해머드릴 프로젝트, 스파이 앱, Weeping Angel Attack 이런 프로젝트를 보면 CIA가 참 부럽다는 생각도 좀 드네요.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wikileaks.org/ciav7p1/&quot;&gt;https://wikileaks.org/ciav7p1/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://file.wikileaks.org/torrent/WikiLeaks-Year-Zero-2017-v1.7z.torrent&quot;&gt;https://file.wikileaks.org/torrent/WikiLeaks-Year-Zero-2017-v1.7z.torrent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thehackernews.com/2017/03/wikileaks-cia-hacking-tool.html&quot;&gt;http://thehackernews.com/2017/03/wikileaks-cia-hacking-tool.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bleepingcomputer.com/news/security/vault-7-cia-developed-24-decoy-applications-to-spy-on-targets/&quot;&gt;https://www.bleepingcomputer.com/news/security/vault-7-cia-developed-24-decoy-applications-to-spy-on-targets/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>i2sec 기술 블로그 오픈기</title>
      <link>/2017/03/06/openblog.html</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 -0800</pubDate>
      <author>김동현</author>
      <guid>/2017/03/06/openblog</guid>
      <description>&lt;p&gt;안녕하세요. i2sec의 김동현입니다.
내부기술성장을 위해 이래저래 열심히 하고 있지만, 이제서야 발판인 블로그를 오픈하게 됬네요.
본 글에서는 github.io로 이전하게 된 계기와 여러가지 잡담 및 포스팅 방향에 대해 서술합니다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;블로그 오픈해보자&lt;/h1&gt;
&lt;p&gt;사실 저는 개인 블로그 운영기간은 매우 길었습니다. 2012년에서 14년도까지는 네이버 블로그,
그 이후에는 [Tistory 블로그][pupu-blog], 마지막으로 최근 [github 블로그][pupu-github]까지 매우 다양한 플랫폼을 이용해 보았습니다.
Wordpress기반으로 회사 블로그를 만들었다가 한달만에 빠르게 삭제한 경험도 있구요.
플랫폼마다 검색엔진에서의 유입량이 다르고, 유입타겟 등이 다 달랐습니다.
회사 블로그를 운영하려고 하니 여러가지 신경쓸 내용이 많더군요. 이래저래 지체되고 있다가 최근 한 계기로 인해 제대로 운영해 보려 합니다.
(곤 CEO가 많이 쪼았어요. 내부 기술공유만 하지말고 외부에도 좋은내용 알리라고…ㅠㅠ)&lt;/p&gt;

&lt;h3 id=&quot;githubio&quot;&gt;왜 Github.io로?&lt;/h3&gt;
&lt;p&gt;저는 참 개발하는걸 좋아합니다. 지금도 여러가지 개인/팀 프로젝트를 하고 있구요.
최근 필수적으로 사용하는게 Github 프로젝트인데요. 최근에서야 github.io 서비스를 알게 되었습니다.
그래서, 제가 직접 한번 만들어 보고 ([예제][pupu-github]) 아래와 같은 이유로 선택하게 되었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선, 도메인 값이 전혀 들지 않습니다. (좀 장기적인 서비스는 도메인서비스를 고려해야되는데 참 좋더군요.)&lt;/li&gt;
  &lt;li&gt;원하는 기능은 직접 개발해 넣을 수 있습니다. (블로그 서비스와는 느낌이 많이 달랐습니다.)&lt;/li&gt;
  &lt;li&gt;포스팅의 버젼관리를 아주 편하게 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;구글검색유입량이 상당히 잘 됩니다.&lt;/li&gt;
  &lt;li&gt;MD문법으로 한번만 작성해보면 손에 아주 잘 익습니다. (마우스 클릭 싫어하면 적응이 참 편합니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 이유로 github.io를 선택하게 되었고, 제가 메인 매니지먼트를 맡아 운영할 예정입니다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;어떤 포스트가 작성되는가?&lt;/h3&gt;
&lt;p&gt;우선 저희는 현재 정보보안 컨설팅 및 교육을 메인사업으로 하고 있습니다.
사업분야에 맞는 내부 연구원들의 연구결과 및 공부결과를 블로그 글에 적으려고 합니다.
아래와 같은 주기로 글이 작성 됩니다.
- 장기교육생들의 Best Project TOP 3
- 내부 연구원들의 단기/중기/장기 프로젝트
- 정보보안 Hot Issue 정리
- 실무 정보보안컨설팅 중 흥미로운 사례(고객사 명 및 주요자산은 비공개)
- 0-Day 분석 글, 국내외 보안 통계 등 등 ..
- IT관련 모든 기술(빅데이터, 머신러닝, 딥러닝, AI…)
대부분의 기술적 주제를 다룬다고 생각하시면 될 것 같아요.
&lt;img src=&quot;http://mkgk888.cafe24.com/i2sec1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;[i2sec][i2sec]블로그는 이제 시작합니다.
주변에 관심있는 분들이 많은 만큼, 조언도 많이 해주시고 칭찬도 많이 해주시면 좋겠습니다.
좋은 정보를 알리고, 공유에 앞장서는 i2sec 해킹팀이 되겠습니다.&lt;/p&gt;
&lt;ninja&gt;
감사합니다.

[ninja]: https://i2sec.github.io/images/logo.png
[i2sec]: http://i2sec.co.kr
[pupu-blog]: http://hackpupu.tistory.com
[pupu-github]: https://hackpupu.github.io
&lt;/ninja&gt;
</description>
    </item>
    

  </channel>
</rss>
